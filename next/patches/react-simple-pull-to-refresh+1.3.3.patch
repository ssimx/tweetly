diff --git a/node_modules/react-simple-pull-to-refresh/build/index.esm.js b/node_modules/react-simple-pull-to-refresh/build/index.esm.js
index 10a7f9c..df5162a 100644
--- a/node_modules/react-simple-pull-to-refresh/build/index.esm.js
+++ b/node_modules/react-simple-pull-to-refresh/build/index.esm.js
@@ -1,4 +1,4 @@
-import React, { useRef, useEffect } from 'react';
+import React, { useRef, useEffect, useState } from 'react';
 
 var DIRECTION;
 (function (DIRECTION) {
@@ -72,6 +72,51 @@ function styleInject(css, ref) {
 var css = ".lds-ellipsis {\n  display: inline-block;\n  position: relative;\n  width: 64px;\n  height: 64px; }\n\n.lds-ellipsis div {\n  position: absolute;\n  top: 27px;\n  width: 11px;\n  height: 11px;\n  border-radius: 50%;\n  background: #363636;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0); }\n\n.lds-ellipsis div:nth-child(1) {\n  left: 6px;\n  animation: lds-ellipsis1 0.6s infinite; }\n\n.lds-ellipsis div:nth-child(2) {\n  left: 6px;\n  animation: lds-ellipsis2 0.6s infinite; }\n\n.lds-ellipsis div:nth-child(3) {\n  left: 26px;\n  animation: lds-ellipsis2 0.6s infinite; }\n\n.lds-ellipsis div:nth-child(4) {\n  left: 45px;\n  animation: lds-ellipsis3 0.6s infinite; }\n\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0); }\n  100% {\n    transform: scale(1); } }\n\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1); }\n  100% {\n    transform: scale(0); } }\n\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0); }\n  100% {\n    transform: translate(19px, 0); } }\n";
 styleInject(css);
 
+const ProgressSpinner = ({ progress }) => {
+  const normalizedProgress = Math.max(0, progress - 30); // Ensure progress starts at 0
+  const radius = 12;
+  const circumference = 2 * Math.PI * radius;
+  const strokeDashoffset = circumference - (normalizedProgress / 70) * circumference; // Scale between 0-100%
+
+  return (
+    React.createElement("div", {
+      className: `mt-2 w-full flex-center h-10 relative ${progress > 30 ? 'visible' : 'invisible'}`,
+      style: { opacity: (progress - 30) / 70, marginTop: (progress - 30) / 2 } // Smooth fade-in effect
+    },
+      React.createElement("svg", {
+        className: "h-full transform -rotate-90",
+        viewBox: "0 0 36 36",
+        xmlns: "http://www.w3.org/2000/svg"
+      },
+        // Background circle (outline)
+        React.createElement("circle", {
+          cx: "14",
+          cy: "14",
+          r: radius,
+          fill: "none",
+          stroke: "currentColor",
+          strokeWidth: "3"
+        }),
+
+        // Progress circle
+        React.createElement("circle", {
+          cx: "14",
+          cy: "14",
+          r: radius,
+          fill: "none",
+          stroke: "currentColor",  // Twitter blue
+          strokeWidth: "3",
+          strokeDasharray: circumference,
+          strokeDashoffset: strokeDashoffset,
+          strokeLinecap: "round",
+          transition: "stroke-dashoffset 0.3s ease-out"
+        })
+      )
+    )
+  );
+};
+
+
 // Source: https://loading.io/css/
 var RefreshingContent = function () {
     return (React.createElement("div", { className: "lds-ellipsis" },
@@ -90,18 +135,41 @@ var css$1 = ".ptr,\n.ptr__children {\n  height: 100%;\n  width: 100%;\n  overflo
 styleInject(css$1);
 
 var PullToRefresh = function (_a) {
-    var _b = _a.isPullable, isPullable = _b === void 0 ? true : _b, _c = _a.canFetchMore, canFetchMore = _c === void 0 ? false : _c, onRefresh = _a.onRefresh, onFetchMore = _a.onFetchMore, _d = _a.refreshingContent, refreshingContent = _d === void 0 ? React.createElement(RefreshingContent, null) : _d, _e = _a.pullingContent, pullingContent = _e === void 0 ? React.createElement(PullingContent, null) : _e, children = _a.children, _f = _a.pullDownThreshold, pullDownThreshold = _f === void 0 ? 67 : _f, _g = _a.fetchMoreThreshold, fetchMoreThreshold = _g === void 0 ? 100 : _g, _h = _a.maxPullDownDistance, maxPullDownDistance = _h === void 0 ? 95 : _h, // max distance to scroll to trigger refresh
-    _j = _a.resistance, // max distance to scroll to trigger refresh
-    resistance = _j === void 0 ? 1 : _j, backgroundColor = _a.backgroundColor, _k = _a.className, className = _k === void 0 ? '' : _k;
+    var _b = _a.isPullable, isPullable = _b === void 0 ? true : _b, 
+        _c = _a.canFetchMore, canFetchMore = _c === void 0 ? false : _c, 
+        onRefresh = _a.onRefresh, 
+        onFetchMore = _a.onFetchMore, 
+        // New prop for custom progress spinner
+        _d = _a.progressSpinner, 
+        progressSpinner = _d === void 0 ? ProgressSpinner : _d,
+        _e = _a.refreshingContent, 
+        refreshingContent = _e === void 0 ? React.createElement(RefreshingContent, null) : _e, 
+        _f = _a.pullingContent, 
+        pullingContent = _f === void 0 ? React.createElement(PullingContent, null) : _f, 
+        children = _a.children, 
+        _g = _a.pullDownThreshold, 
+        pullDownThreshold = _g === void 0 ? 67 : _g, 
+        _h = _a.fetchMoreThreshold, 
+        fetchMoreThreshold = _h === void 0 ? 100 : _h, 
+        _j = _a.maxPullDownDistance, 
+        maxPullDownDistance = _j === void 0 ? 95 : _j, // max distance to scroll to trigger refresh
+        _k = _a.resistance, 
+        resistance = _k === void 0 ? 1 : _k, 
+        backgroundColor = _a.backgroundColor, 
+        _l = _a.className, 
+        className = _l === void 0 ? '' : _l;
+    
     var containerRef = useRef(null);
     var childrenRef = useRef(null);
     var pullDownRef = useRef(null);
     var fetchMoreRef = useRef(null);
+    const [progress, setProgress] = useState(0);
     var pullToRefreshThresholdBreached = false;
     var fetchMoreTresholdBreached = false; // if true, fetchMore loader is displayed
     var isDragging = false;
     var startY = 0;
     var currentY = 0;
+
     useEffect(function () {
         if (!isPullable || !childrenRef || !childrenRef.current)
             return;
@@ -133,6 +201,7 @@ var PullToRefresh = function (_a) {
         canFetchMore,
         fetchMoreThreshold,
     ]);
+
     /**
      * Check onMount / canFetchMore becomes true
      *  if fetchMoreThreshold is already breached
@@ -156,6 +225,7 @@ var PullToRefresh = function (_a) {
             onFetchMore().then(initContainer).catch(initContainer);
         }
     }, [canFetchMore, children]);
+
     /**
      * Returns distance to bottom of the container
      */
@@ -166,6 +236,7 @@ var PullToRefresh = function (_a) {
         var scrollHeight = childrenRef.current.scrollHeight; // is the pixels of the whole container
         return scrollHeight - scrollTop - window.innerHeight;
     };
+
     var initContainer = function () {
         requestAnimationFrame(function () {
             /**
@@ -190,6 +261,7 @@ var PullToRefresh = function (_a) {
                 fetchMoreTresholdBreached = false;
         });
     };
+
     var onTouchStart = function (e) {
         isDragging = false;
         if (e instanceof MouseEvent) {
@@ -209,6 +281,7 @@ var PullToRefresh = function (_a) {
         }
         isDragging = true;
     };
+
     var onTouchMove = function (e) {
         if (!isDragging) {
             return;
@@ -228,22 +301,38 @@ var PullToRefresh = function (_a) {
             e.preventDefault();
         }
         var yDistanceMoved = Math.min((currentY - startY) / resistance, maxPullDownDistance);
+
+        // Calculate progress percentage
+        const calculatedProgress = Math.min(
+            Math.max(0, (yDistanceMoved / pullDownThreshold) * 100), 
+            100
+        );
+        setProgress(calculatedProgress);
+
         // Limit to trigger refresh has been breached
         if (yDistanceMoved >= pullDownThreshold) {
             isDragging = true;
             pullToRefreshThresholdBreached = true;
             containerRef.current.classList.remove('ptr--dragging');
             containerRef.current.classList.add('ptr--pull-down-treshold-breached');
+        } else {
+            isDragging = true;
+            pullToRefreshThresholdBreached = false;
+            containerRef.current.classList.add('ptr--dragging');
+            containerRef.current.classList.remove('ptr--pull-down-treshold-breached');
         }
+
         // maxPullDownDistance breached, stop the animation
         if (yDistanceMoved >= maxPullDownDistance) {
             return;
         }
-        pullDownRef.current.style.opacity = ((yDistanceMoved) / 65).toString();
+
+        pullDownRef.current.style.opacity = ((calculatedProgress - 30) / 100).toString();
         childrenRef.current.style.overflow = 'visible';
         childrenRef.current.style.transform = "translate(0px, " + yDistanceMoved + "px)";
         pullDownRef.current.style.visibility = 'visible';
     };
+
     var onScroll = function (e) {
         /**
          * Check if component has already called onFetchMore
@@ -259,6 +348,7 @@ var PullToRefresh = function (_a) {
             onFetchMore().then(initContainer).catch(initContainer);
         }
     };
+
     var onEnd = function () {
         isDragging = false;
         startY = 0;
@@ -276,10 +366,17 @@ var PullToRefresh = function (_a) {
         }
         onRefresh().then(initContainer).catch(initContainer);
     };
+
     return (React.createElement("div", { className: "ptr " + className, style: { backgroundColor: backgroundColor }, ref: containerRef },
         React.createElement("div", { className: "ptr__pull-down", ref: pullDownRef },
-            React.createElement("div", { className: "ptr__loader ptr__pull-down--loading" }, refreshingContent),
-            React.createElement("div", { className: "ptr__pull-down--pull-more" }, pullingContent)),
+            React.createElement("div", { className: "ptr__loader ptr__pull-down--loading" }, 
+                // Use the progress spinner here with dynamic progress
+                React.createElement(progressSpinner, { progress: progress })
+            ),
+            React.createElement("div", { className: "ptr__pull-down--pull-more" }, 
+                                // Use the progress spinner here with dynamic progress
+                React.createElement(progressSpinner, { progress: progress })
+            )),
         React.createElement("div", { className: "ptr__children", ref: childrenRef },
             children,
             React.createElement("div", { className: "ptr__fetch-more", ref: fetchMoreRef },
